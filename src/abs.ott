embed
{{ coq
From Equations Require Import Equations.
From stdpp Require Import prelude strings gmap.

#[export] Hint Resolve bool_dec : ott_coq_equality.
#[export] Hint Resolve Ascii.ascii_dec : ott_coq_equality.
#[export] Hint Resolve BinPos.Pos.eq_dec : ott_coq_equality.

(** * ABS Definitions *)
}}
indexvar i, j, n ::=
      {{ lex numeral }}
      {{ coq nat }}
      {{ coq-equality }}
      {{ com index variables (subscripts) }}
metavar fc ::=
      {{ lex Alphanum }}
      {{ coq string }}
      {{ coq-equality }}
      {{ com function name }}
metavar x, y ::=
      {{ lex alphanum }}
      {{ coq string }}
      {{ coq-equality }}
      {{ com variable }}
metavar b ::=
  {{ lex alphanum }}
  {{ com boolean }}
  {{ coq-equality }}
  {{ coq bool }}
metavar z ::=
  {{ lex numeral }}
  {{ com integer }}
  {{ coq-equality }}
  {{ coq Z }}
metavar fut ::=
  {{ lex numeral }}
  {{ com future type }}
  {{ coq-equality }}
  {{ coq nat }}
metavar f ::=
  {{ lex alphanum }}
  {{ com future name }}
  {{ coq-equality }}
  {{ coq string }}
metavar o ::=
  {{ lex alphanum }}
  {{ com object name }}
  {{ coq-equality }}
  {{ coq string }}
metavar m ::=
  {{ lex alphanum }}
  {{ com method name }}
  {{ coq-equality }}
  {{ coq string }}
metavar C ::=
  {{ lex alphanum }}
  {{ com class name }}
  {{ coq-equality }}
  {{ coq string }}
grammar
T :: T_ ::=
   {{ com ground type }}
  | Bool :: :: bool 
  | Int  :: :: int

F :: F_ ::=
  {{ com function definition }}
  | def T fc ( T1 x1 , ... , Tn xn ) = e ; :: :: fn

t :: t_ ::=
  {{ com ground term }}
  | b :: :: b
    {{ com boolean }}
  | z :: :: int
    {{ com integer }}
  | fut :: :: fut
    {{ com future }}

e :: e_ ::=
  {{ com expression }}
  | t :: :: t
    {{ com term }}
  | x :: :: var
    {{ com variable }}
  | fc ( e1 , ... , en ) :: :: fn_call
    {{ com function call }}
  | e [ x1 |-> y1 , ... , xn |-> yn ] :: M :: subst_var
    {{ coq (e_var_subst [[e]] [[x1 |-> y1 ... xn |-> yn]]) }}

rhs :: rhs_ ::=
  {{ com right-hand side in assignment }}
| e :: :: e
| o ! m ( e1 , ... , en ) :: :: invoc
  {{ com we invoke on an object directly, not by some mysterious evaluation to object identifiers }}
| f . get :: :: get

stmt :: stmt_ ::=
  {{ com statement }}
| stmt1 ; stmt2 :: :: seq
| skip :: :: skip
| x := rhs :: :: asgn
| if e { stmt1 } else { stmt2 } :: :: cond
| while e { stmt } :: :: loop
| return e :: :: ret

M :: M_ ::=
  {{ com method definition }}
| T m ( T1 x1 , ... , Ti xi ) { T'1 y1 ; ... ; T'j yj ; stmt } :: :: m

CL :: '' ::=
  {{ com class definition }}
| class C { T1 x1 ; ... ; Ti xi ; M1 ... Mj }  :: :: class

P :: '' ::=
  {{ com program }}
| CL1 ... CLn { T1 x1 ; ... ; Ti xi ; stmt } :: :: program

sig :: sig_ ::=
     | T1 , ... , Tn -> T :: :: sig

ctxv :: ctxv_ ::=
     | T :: :: T
     | sig :: :: sig
     | Fut < T > :: :: fut

s {{ tex \sigma }} :: s_ ::=
  {{ coq gmap x t }}
  {{ coq-universe Type }}
   | s [ x1 |-> t1 , ... , xn |-> tn ] :: M :: add_list
     {{ coq (foldr (fun (xt : x * t) (s0 : s) => insert (fst xt) (snd xt) s0) [[s]] [[x1 |-> t1 ... xn |-> tn]]) }}

task :: '' ::=
 {{ coq-universe Type }}
| tsk ( stmt , s ) :: :: tsk

G {{ tex \Gamma }} :: G_ ::=
  {{ coq gmap x ctxv }}
  {{ coq-universe Type }}
   | G [ x1 |-> T1 , ... , xn |-> Tn ] :: M :: add_list
     {{ coq (foldr (fun (xT : x * T) (G0 : G) => insert (fst xT) (ctxv_T (snd xT)) G0) [[G]] [[x1 |-> T1 ... xn |-> Tn]]) }}

terminals :: terminals_ ::=
  | Bool :: :: bool {{ tex \mathsf{Bool} }}
  | Int :: :: int {{ tex \mathsf{Int} }}
  | ~>  :: :: trans {{ tex \leadsto }}
  | |- :: :: turnstile {{ tex \vdash }}
  | |->  :: :: mapsto {{ tex \mapsto }}
  | ->  :: :: arrow {{ tex \rightarrow }}
  | fresh :: :: fresh {{ tex \mathsf{fresh} }}

formula :: formula_ ::= 
  {{ com formulas }}
  | judgement :: :: judgement
    {{ com judgment }}
  | formula1 ... formulan :: :: dots
    {{ com conjunction of formulas }}
  | G ( x ) = T :: M :: G_eq_T
    {{ coq (lookup [[x]] [[G]] = Some (ctxv_T [[T]])) }}
  | s ( x ) = t :: M :: s_eq_t
    {{ coq (lookup [[x]] [[s]] = Some ([[t]])) }}
  | G ( fc ) = sig :: M :: G_fn_eq_sig
    {{ coq (lookup [[fc]] [[G]] = Some (ctxv_sig [[sig]])) }}
  | distinct ( x1 , ... , xn ) :: M :: distinct_vars
    {{ coq (NoDup [[x1 ... xn]]) }}
  | fresh ( x1 , ... , xn , e ) :: M :: fresh_e
    {{ coq (fresh_vars_e [[x1 ... xn]] [[e]]) }}
  | fresh ( x1 , ... , xn , s ) :: M :: fresh_s
    {{ coq (fresh_vars_s [[x1 ... xn]] [[s]]) }}
  | fresh ( x1 , ... , xn , e , s ) :: M :: fresh
    {{ coq (fresh_vars [[x1 ... xn]] [[e]] [[s]]) }}
  | disjoint ( ( x1 , ... , xi ) , ( y1 , ... , yj ) ) :: M :: disjoint
    {{ coq (disjoint [[x1 ... xi]] [[y1 ... yj]]) }}
  | well_formed ( x1 , ... , xn , e , s ) :: M :: well_formed
    {{ coq (well_formed [[e]] [[s]] [[x1 ... xn]]) }}

embed
{{ coq

Equations e_var_subst_one (e5:e) (x_ y_: x) : e := {
 e_var_subst_one (e_t t) _ _ := e_t t;
 e_var_subst_one (e_var x0) x_ y_ := if (eq_x x0 x_) then (e_var y_) else (e_var x0);
 e_var_subst_one (e_fn_call fn0 arg_list) x_ y_ := e_fn_call fn0 (e_list_subst_one arg_list x_ y_) }
where e_list_subst_one (es:list e) (x_ y_: x) : list e := {
 e_list_subst_one nil _ _ := nil;
 e_list_subst_one (e0::es) x_ y_ := e_var_subst_one e0 x_ y_ :: e_list_subst_one es x_ y_
}.

Definition e_var_subst (e5:e) (l:list (x*x)) : e := foldr (fun '(x', y') e' => e_var_subst_one e' x' y') e5 l.

Equations fresh_vars_e (l : list x) (e0 : e) : Prop := {
 fresh_vars_e _ (e_t _) := True;
 fresh_vars_e l (e_var x) := ~ In x l;
 fresh_vars_e l (e_fn_call fn el) := fresh_vars_el l el }
where fresh_vars_el (l : list x) (el0 : list e) : Prop := {
 fresh_vars_el l nil := True;
 fresh_vars_el l (e1::el0) := fresh_vars_e l e1 /\ fresh_vars_el l el0 }.

Fixpoint fresh_vars_s (l : list x) (s0 : s): Prop :=
  match l with
  | nil => True
  | (y::ys) => lookup y s0 = None /\ fresh_vars_s ys s0
  end.

Definition fresh_vars (l : list x) (e0: e) (s0: s) : Prop :=
  fresh_vars_s l s0 /\ fresh_vars_e l e0.

Definition well_formed (e0: e) (s0: s) (l:list x) : Prop := fresh_vars l e0 s0 /\ NoDup l.
}}

defns
  expression_well_typing :: typ_ ::=

defn 
  G |- e : T :: :: e :: ''
    {{ com well-typed expression }} by
  
  ------------- :: bool
  G |- b : Bool

  ------------ :: int
  G |- z : Int

  G ( x ) = T
  ----------- :: var
  G |- x : T

  G |- e1 : T1 ... G |- en : Tn
  G ( fc ) = T1 , ... , Tn -> T
  ----------------------------- :: func_expr
  G |- fc ( e1 , ... , en ) : T

defns
  function_well_typing :: typ_ ::=

defn
  G |- F :: :: F :: ''
    {{ com well-typed function declaration }} by

  G ( fc ) = T1 , ... , Tn -> T
  G [ x1 |-> T1 , ... , xn |-> Tn ] |- e : T
  distinct (x1 , ... , xn)
  ------------------------------------------- :: func_decl
  G |- def T fc ( T1 x1 , ... , Tn xn ) = e ;

defns
  evaluation_reduction :: red_ ::=

defn
  F1 ... Fn , s |- e ~> s' |- e' :: :: e :: ''
  {{ com expression evaluation }} by

  s ( x ) = t
  ---------------------------- :: var
  F1 ... Fn , s |- x ~> s |- t

  F1 ... Fn , s |- e ~> s' |- e'
  ------------------------------------------------------------------------------------------------------------- :: fun_exp
  F1 ... Fn , s |- fc ( e1 , ... , ei , e , e'1 , ... , e'j ) ~> s' |- fc ( e1 , ... , ei , e' , e'1 , ... , e'j )

  well_formed (y1 , ... , yn , e, s)
  disjoint ((y1 , ... , yn) , (x1 , ... , xn))
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- :: fun_ground
  F1 ... Fi def T fc ( T1 x1 , ... , Tn xn ) = e ; F'1 ... F'j , s |- fc ( t1 , ... , tn ) ~> s [ y1 |-> t1 , ... , yn |-> tn ] |- e [ x1 |-> y1 , ... , xn |-> yn ]
